{"version":3,"sources":["../../function/local_file.js"],"names":["mongoose","require","videos","model","s3_file","fileUpload","path","fs","rimraf","ffmpeg","exports","remove","id","callback","err","find","_id","exec","upload","upload_video","size","res","setFfmpegPath","setFfprobePath","ext","extname","name","basename","slice","length","file_name","file_type","formatBytes","save","video","mkdir","mv","screenshots","timestamps","filename","folder","ffprobe","metadata","console","error","dimension","streams","width","height","duration","toHHMMSS","update","log","status","send","bytes","decimals","k","dm","sizes","i","Math","floor","parseFloat","pow","toFixed","second","sec_num","parseInt","hours","minutes","seconds"],"mappings":"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","file":"local_file.js","sourcesContent":["const mongoose = require('mongoose');\r\nconst videos = mongoose.model('videos');\r\n\r\nconst s3_file = require('./s3_file');\r\nconst fileUpload = require('express-fileupload');\r\nconst path = require('path');\r\nconst fs = require('fs');\r\nconst rimraf = require('rimraf');\r\nconst ffmpeg = require('fluent-ffmpeg');\r\n\r\nexports.remove = async (id, callback) => {\r\n    try {\r\n        await rimraf('./public/upload/' + id, function (err) {\r\n        });\r\n        await videos.find({_id: id}).remove().exec();\r\n        await callback();\r\n    } catch (err) {\r\n        return err\r\n    }\r\n};\r\n\r\nexports.upload = async (upload_video, size, res) => {\r\n    ffmpeg.setFfmpegPath(\"c:\\\\ffmpeg\\\\bin\\\\ffmpeg.exe\");\r\n    ffmpeg.setFfprobePath(\"c:\\\\ffmpeg\\\\bin\\\\ffprobe.exe\");\r\n    let ext = path.extname(upload_video.name);\r\n    let name = path.basename(upload_video.name).slice(0, 0 - ext.length);\r\n    switch (ext) {\r\n        case \".mov\":\r\n        case \".mp4\":\r\n            try {\r\n                const video = await videos({\r\n                    file_name: name,\r\n                    file_type: ext,\r\n                    size: formatBytes(size)\r\n                }).save();\r\n                const id = video.id;\r\n                const path = './public/upload/' + id;\r\n                await fs.mkdir(path);\r\n                await fs.mkdir(path+\"/append\");\r\n                await upload_video.mv(path + '/original' + ext);\r\n                // await s3_file.upload(\"fyp-videoinout-bucket\", id + ext, upload_video);\r\n                await new ffmpeg(path + '/original' + ext).screenshots({\r\n                    timestamps: ['50%'],\r\n                    filename: 'thumbnail.png',\r\n                    folder: path\r\n                });\r\n                await ffmpeg.ffprobe(path + '/original' + ext, function (err, metadata) {\r\n                    if (err) {\r\n                        console.error(err);\r\n                    } else {\r\n                        // metadata should contain 'width', 'height' and 'display_aspect_ratio'\r\n                        let dimension = metadata.streams[0].width + \" x \" + metadata.streams[0].height;\r\n                        let duration = toHHMMSS(metadata.streams[0].duration);\r\n                        videos.update({_id: id}, {duration: duration, dimension: dimension}, function () {\r\n                            console.log(duration)\r\n                        });\r\n                    }\r\n                });\r\n            } catch (err) {\r\n                return err\r\n            }\r\n            break;\r\n        default:\r\n            res.status(500).send(err);\r\n    }\r\n};\r\n\r\nfunction formatBytes(bytes, decimals) {\r\n    if (bytes === 0) return '0 Bytes';\r\n    let k = 1024,\r\n        dm = decimals || 2,\r\n        sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],\r\n        i = Math.floor(Math.log(bytes) / Math.log(k));\r\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\r\n}\r\n\r\nfunction toHHMMSS(second) {\r\n    let sec_num = parseInt(second, 10); // don't forget the second param\r\n    let hours = Math.floor(sec_num / 3600);\r\n    let minutes = Math.floor((sec_num - (hours * 3600)) / 60);\r\n    let seconds = sec_num - (hours * 3600) - (minutes * 60);\r\n\r\n    if (hours < 10) {\r\n        hours = \"0\" + hours;\r\n    }\r\n    if (minutes < 10) {\r\n        minutes = \"0\" + minutes;\r\n    }\r\n    if (seconds < 10) {\r\n        seconds = \"0\" + seconds;\r\n    }\r\n    return hours + ':' + minutes + ':' + seconds;\r\n}"]}